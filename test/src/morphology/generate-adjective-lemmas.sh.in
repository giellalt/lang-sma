#!/bin/bash
# @configure_input@

# Automake interprets the exit status as follows:
# - an exit status of 0 will denote a success
# - an exit status of 77 a skipped test
# - an exit status of 99 a hard error
# - any other exit status will denote a failure.

# To run this test script only, do:
#
# make check TESTS=generate-adjective-lemmas.sh

# Dette skriptet tester at nesten alle lemmaene i
# $GTHOME/langs/sma/src/morphology/stems/adjectives.lexc kan genereres.
# De som ikke kan genereres, kopieres til missing_adjectives_lemmas.txt

###### Variables: #######
POS=adjectives
### in ###
source_file=${srcdir}/../../../src/fst/stems/${POS}.lexc
generator_file=./../../../src/generator-gt-norm
analyser_file=./../../../src/analyser-gt-norm

### out ###
# Temporary files:
all_lemmas=./filtered-all-${POS}.txt
attr_lemmas=./filtered-attr-${POS}.txt
pred_lemmas=./filtered-pred-${POS}.txt
comp_lemmas=./filtered-comp-${POS}.txt
supr_lemmas=./filtered-supr-${POS}.txt
todo_lemmas=./filtered-todo-${POS}.txt
lemma_files="$attr_lemmas $pred_lemmas $comp_lemmas $supr_lemmas $todo_lemmas"
# Result files, will get filename suffix programmatically further down:
generated_all_lemmas=./generated-all-${POS}
generated_attr_lemmas=./generated-attr-${POS}
generated_pred_lemmas=./generated-pred-${POS}
generated_comp_lemmas=./generated-comp-${POS}
generated_supr_lemmas=./generated-supr-${POS}
generated_todo_lemmas=./generated-todo-${POS}
result_file=missing_${POS}_lemmas
gen_result_file=generated_missing_${POS}_lemmas
ana_result_file=analysed_missing_${POS}_lemmas

# SKIP if source file does not exist (works with both single and
# multiple files):
if [ ! `ls -1 $source_file 2>/dev/null | wc -l ` -gt 0 ]; then
    echo
    echo "*** Warning: Source file(s) $source_file not found."
    echo
    exit 77
fi

# Use autotools mechanisms to only run the configured fst types in the tests:
fsttype=
@CAN_HFST_TRUE@fsttype="$fsttype hfst"
@CAN_XFST_TRUE@fsttype="$fsttype xfst"

# Exit if both hfst and xerox have been shut off:
if test -z "$fsttype" ; then
    echo "All transducer types have been shut off at configure time."
    echo "Nothing to test. Skipping."
    exit 77
fi

# Get external Mac editor for viewing failed results from configure:
EXTEDITOR=@SEE@

##### Extract lemmas - add additional egrep pattern as parameters: #####
##### --include "(pattern1|pattern2|...)"                          #####
##### --exclude "(pattern1|pattern2|...)"                          #####
# Regular attributive lemmas:
@GTCORE@/scripts/extract-lemmas.sh \
    --exclude "(PRED|CASE.*;| MES|EVTEBE|\+Use\/MT)" \
    $source_file > $attr_lemmas

# Predicative lemmas:
@GTCORE@/scripts/extract-lemmas.sh \
    --include "(PRED|CASE.*;)" \
    $source_file > $pred_lemmas

# Comparative lemmas:
@GTCORE@/scripts/extract-lemmas.sh \
    --include "(EVTEBE|EVENCOMP)" \
    $source_file > $comp_lemmas

# Superlative lemmas:
@GTCORE@/scripts/extract-lemmas.sh \
    --include "( MES)" \
    $source_file > $supr_lemmas

# TODO lemmas:
@GTCORE@/scripts/extract-lemmas.sh \
    --include "( A-TODO)" \
    $source_file > $todo_lemmas

###### Start testing: #######
transducer_found=0
Fail=0

# The script tests both Xerox and Hfst transducers if available:
for f in $fsttype; do
    if [ $f == "xfst" ]; then
        lookup_tool="@LOOKUP@ -flags mbTT"
        suffix="xfst"
        # Does lookup support -q / quiet mode?
        lookup_quiet=$($lookup_tool -q 2>&1 | grep USAGES)
        if ! [[ $lookup_quiet == *"USAGES"* ]] ; then
            # it does support quiet mode, add the -q flag:
            lookup_tool="@LOOKUP@ -q -flags mbTT"
        fi
    elif [ $f == "hfst" ]; then
        lookup_tool="@HFST_OPTIMIZED_LOOKUP@ -q"
        suffix="hfstol"
    else
        Fail=1
        printf "ERROR: Unknown fst type! "
        echo "$f - FAIL"
        continue
    fi
    if [ -f "$generator_file.$suffix" ]; then
        let "transducer_found += 1"

###### Test lemma generation: #######
        # generate lemmas in attr, extract the resulting generated
        # lemma, store it:
        sed 's/$/+A+Attr/' $attr_lemmas \
            | $lookup_tool $generator_file.$suffix \
            | fgrep -v "+?" | grep -v "^$" | cut -f2 | sort -u \
            > $generated_attr_lemmas.$f.txt 

        # generate lemmas in singular pred, extract the resulting generated
        # lemma, store it:
        sed 's/$/+A+Sg+Nom/' $pred_lemmas \
            | $lookup_tool $generator_file.$suffix \
            | fgrep -v "+?" | grep -v "^$" | cut -f2 | sort -u \
            > $generated_pred_lemmas.$f.txt 

        # generate lemmas in comparative, extract the resulting generated
        # lemma, store it:
        sed 's/$/+A+Der\/Comp+A+Sg+Nom/' $comp_lemmas \
            | $lookup_tool $generator_file.$suffix \
            | fgrep -v "+?" | grep -v "^$" | cut -f2 | sort -u \
            > $generated_comp_lemmas.$f.txt 

        # generate lemmas in superlative, extract the resulting generated
        # lemma, store it:
        sed 's/$/+A+Der\/Superl+A+Sg+Nom/' $supr_lemmas \
            | $lookup_tool $generator_file.$suffix \
            | fgrep -v "+?" | grep -v "^$" | cut -f2 | sort -u \
            > $generated_supr_lemmas.$f.txt 

        # generate TODO lemmas, extract the resulting generated
        # lemmas, store them:
        sed 's/$/+A+TODO/' $todo_lemmas \
            | $lookup_tool $generator_file.$suffix \
            | fgrep -v "+?" | grep -v "^$" | cut -f2 | sort -u \
            > $generated_todo_lemmas.$f.txt 

###### Collect results, and generate debug info if FAIL: #######
        # Sort and compare original input with resulting output - the diff is
        # used to generate lemmas which are opened in SEE:
        cat $lemma_files | sort -u > $all_lemmas
        cat $generated_attr_lemmas.$f.txt \
            $generated_pred_lemmas.$f.txt \
            $generated_comp_lemmas.$f.txt \
            $generated_supr_lemmas.$f.txt \
            $generated_todo_lemmas.$f.txt \
            | sort -u > $generated_all_lemmas.$f.txt
        comm -23 $all_lemmas $generated_all_lemmas.$f.txt > $result_file.$f.txt

        # Open the diff file in SubEthaEdit (if there is a diff):
        if [ -s $result_file.$f.txt ]; then
            grep -v '^$' $result_file.$f.txt \
              | sed 's/$/+A+Attr/' \
              | $lookup_tool $generator_file.$suffix \
              > $gen_result_file.$f.txt
            # If we have an analyser, analyse the missing lemmas as well:
            if test -e $analyser_file.$suffix ; then
                grep -v '^$' $result_file.$f.txt \
                  | $lookup_tool $analyser_file.$suffix \
                  > $ana_result_file.$f.txt
            fi
            # Only open the failed lemmas in see if @SEE@ is defined:
            if [ "$EXTEDITOR" ]; then
#                $EXTEDITOR $result_file.$f.txt
#                $EXTEDITOR $gen_result_file.$f.txt
                $EXTEDITOR $ana_result_file.$f.txt
            else
                echo "There were problem lemmas. Details in:"
                echo "* $result_file.$f.txt    "
                echo "* $gen_result_file.$f.txt"
                echo "* $ana_result_file.$f.txt"
            fi
            Fail=1
            echo "$f - FAIL"
            continue
        fi
        echo "$f - PASS"
    fi
done

# At least one of the Xerox or HFST tests failed:
if [ "$Fail" = "1" ]; then
    exit 1
fi

if [ $transducer_found -eq 0 ]; then
    echo ERROR: No transducer found
    exit 77
fi

# When done, remove the generated data file:
rm -f $lemma_files $all_lemmas ./generated*.txt $result_file.*.txt
