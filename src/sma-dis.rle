# Distributed under the terms of the GNU General Public License version 2 
# or any later version.

# =================================================================== #
# =================================================================== #
#            S O U T H   S Á M I   D I S A M B I G U A T O R          #
# =================================================================== #
# =================================================================== #

            # =========================================== #
            #            Short table of contents          #
            # =========================================== #

            # Delimiters
            # Tags and sets
	        # Mapping rules
            # Disambiguation rules
              # One-cohort disambiguation - cycle 0
              # Local disambiguation - cycles 1 and 2
              # Cycle 2: Other local disambiguation         
              # Cycle 3: Global disambiguation 
	          # Cycle 4: Syntactic disambiguation 
	          # Cycle 5: Post-syntactic morphological disambiguation


# ========== #
# Delimiters #
# ========== #


DELIMITERS = "<.>" "<!>" "<?>" "<...>" "<¶>";


# ============= #
# Tags and sets #
# ============= #



LIST BOS = (>>>) (<s>); 
LIST EOS = (<<<) (</s>); # vislcg and CG-2 together.

# Tags declared as single-membered LISTs 
# ======================================

LIST N = N ;
LIST Sg = Sg ;
LIST Pl = Pl ;
LIST Nom = Nom ;
LIST Acc = Acc ;
LIST Gen = Gen ;
LIST Ine = Ine ;
LIST Ela = Ela ;
LIST Ill = Ill ;
LIST Com = Com ;
LIST Ess = Ess ;

LIST PxSg1 = PxSg1 ;
LIST PxSg2 = PxSg2 ;
LIST PxSg3 = PxSg3 ;

LIST PxDu1 = PxDu1 ;
LIST PxDu2 = PxDu2 ;
LIST PxDu3 = PxDu3 ;

LIST PxPl1 = PxPl1 ;
LIST PxPl2 = PxPl2 ;
LIST PxPl3 = PxPl3 ;

LIST V = V ;
LIST Prs = Prs ;
LIST Prt = Prt ;

LIST Sg1 = Sg1 ;
LIST Sg2 = Sg2 ;
LIST Sg3 = Sg3 ;

LIST Du1 = Du1 ;
LIST Du2 = Du2 ;
LIST Du3 = Du3 ;

LIST Pl1 = Pl1 ;
LIST Pl2 = Pl2 ;
LIST Pl3 = Pl3 ;

LIST Inf = Inf ;
LIST Neg = Neg ;
LIST ConNeg = ConNeg ;
LIST Foc/gan = Foc/gan ;

LIST PrfPrc = PrfPrc ;
LIST VGen = VGen ;
LIST Ger = Ger ;

LIST Ind = Ind ;

LIST Imp = Imp ;
LIST ImpII = ImpII ;

LIST Pot = Pot ;
LIST Cond = Cond ;
LIST Imprt = Imprt ;

LIST Opt = Opt ;

LIST Actor = Actor ;
LIST Clt = Clt ;
LIST A = A ;
LIST Ord = Ord ;
LIST ABBR = ABBR ;
LIST ACR = ACR ;

LIST Comp = Comp ;
LIST Superl = Superl ;

LIST Attr = Attr ;

LIST Pron = Pron ;
LIST Pers = Pers ;
LIST Dem = Dem ;
LIST Interr = Interr ;
LIST Rel = Rel ;
LIST Adp = Adp ;
LIST Po = Po ;
LIST Pr = Pr ;
LIST Adv = Adv ;
LIST Interj = Interj ;
LIST Indef = Indef ;
LIST Num = Num ;
LIST Prop = Prop ;

LIST Mal = Mal ;
LIST Fem = Fem ;
LIST Sur = Sur ;

LIST CS = CS ;
LIST CC = CC ;
LIST Pcle = Pcle ;
LIST CLB = CLB ;
LIST PUNCT = PUNCT ;
LIST LEFT = LEFT ;
LIST RIGHT = RIGHT ;
LIST COMMA = "," ;

LIST TITLE = "prof" "cand.philol" ;

LIST CASES = Nom Acc Gen Ill Ine Ela Com Ess ;
LIST NUMBER = Sg Pl ;
LIST NOMEN-NOT-PRON = N A Indef Num Ord ;  # they can have Dem as attr

LIST WORD = N A V Adv Pron Interj Adp Num CS CC Pcle Pr Po ;
SET REALWORD = WORD - Num - Ord ;
SET REALWORD-NOTABBR = WORD - Num - Ord - ABBR ;

LIST NOT-ADV-INT-PCLE = N A Num Pron A V CC CS Adp ;

SET NOT-ADV = WORD - Adv ;

SET NP-HEAD = Num OR N OR Pron ;

SET PRE-NP-HEAD = (Prop Attr) OR (Prop @>N) OR (A Attr) OR (ABBR Attr) OR (Pron Pers Gen) OR (N Gen) OR Num OR (Cmpnd) OR CC OR (Pron Dem) OR (Pron Refl Gen) OR (Pron Indef) OR (PrfPrc @>N) OR (PrfPrc @>N) OR (PrsPrc) OR (A Ord) OR Attr ;
         # The strict version of items that can only be premodifiers, not parts of the predicate - copied from sme-dis.rle
         
SET NPNH = WORD - PRE-NP-HEAD OR (ABBR) ;       # NPNH  = "NOT-PRE-NP-HEAD" 




# Verb sets


 # The set REALCOPULAS is smaller than COPULAS, made for verbs with PrfPrc complements: Seammás REALCOPULAS son dovdan iežas...
LIST REALCOPULAS = "lea" ;

# The set COPULAS is for predicative constructions
LIST COPULAS = "lea" ;

SET V-NOT-COP = V - COPULAS ;

LIST MOD-ASP = "galkedh" "tjoeveridh" "tjoeredh" "sååjhtedh" ;

 # Verbs that never have arguments of their own 
 
LIST AUX-OR-MAIN = "aelkedh" "edtjedh" "maehtedh" "sïjhtedh" "sjïdtedh" "båetedh" ;

 # These verbs can take arguments, so they do not belong in the AUX group, 
 # but they are nevertheless mapped to (@+FAUXV). 
 
SET AUX = COPULAS OR Neg OR MOD-ASP OR AUX-OR-MAIN ;


LIST VFIN = Ind OR Imprt ;


LIST INFV = "aavoedidh" "aelkedh" "buektiehtidh" "provhkedh" ; 
# These are often followed by an infitive.

LIST ILLV = "båetedh" "juhtedh" "ringkedh" ;
LIST COMV = "budtedh" "pruvredh" ;

LIST ILLADV = "bæjjese" "davvese" "daase" "dahkoe" "diekie" "doekoe" "dohkoe" "jallese" "mænngese" "noerhtese" "olkese" "vueliebasse" "våålese" "åarjese" "åvtese" ;

LIST INEADV =  "daebpene" "debpene" "duebpene" "dubpene" "daagkoe" "dagkoe" "doegkoe" "dogkoe" "daajkoe" "dajkoe" "doejkoe" "dojkoe" ;

LIST ELAADV = "daebpede" "debpede" "duebpede" "dubpede"  "dåvvese" ;


# BOUNDARY SETS

SET S-BOUNDARY = (Pron Interr) OR (Pron Rel) OR ("men") OR ("mohte") OR ("\;") OR (":") OR ("-") OR ("–") OR CS OR BOS OR EOS ;


# ============== #
# Disambiguation #
# ============== #




SECTION

# Cycle 0

REMOVE ("Da") OR ("Dan") (0 Pers);
REMOVE Num (0 Neg);
REMOVE ACR (0 CC);

#foreløpig regel:
REMOVE Interj ;

# Short Pronouns

REMOVE:dan Pers + Sg2 + Nom IF (NOT -1 V + Sg2)(0 ("dïhte" Pron Dem Sg Gen))
	## dan
	# short pronouns are placed after the finite verb.

# Proper nouns

#REMOVE Nom IF (0 ABBR + Attr)(1 Prop OR ABBR);
REMOVE Nom IF (0 ABBR + Attr)(*1  Prop OR ABBR BARRIER WORD);
REMOVE Nom IF (0 Prop + Attr)(*1 Prop BARRIER WORD);
	## Trond Trosterud

# Verbs

IFF:IsItConNeg ConNeg (*-1 Neg BARRIER ConNeg); 

REMOVE:PrtInNeg Prs IF (0 Neg)(*1C ConNeg + Prt BARRIER NOT-ADV);

REMOVE:PrsInNeg Prt IF (0 Neg)(*1C ConNeg BARRIER NOT-ADV LINK NOT 0 Prt);

SELECT:PersonInNeg Sg3 IF (0 Neg + Prt)(*1C ConNeg + Sg3 BARRIER NOT-ADV);
SELECT:PersonInNeg Du1 IF (0 Neg + Prt)(*1C ConNeg + Du1 BARRIER NOT-ADV);
SELECT:PersonInNeg Du2 IF (0 Neg + Prt)(*1C ConNeg + Du2 BARRIER NOT-ADV);
SELECT:PersonInNeg Du3 IF (0 Neg + Prt)(*1C ConNeg + Du3 BARRIER NOT-ADV);
SELECT:PersonInNeg Pl1 IF (0 Neg + Prt)(*1C ConNeg + Pl1 BARRIER NOT-ADV);
SELECT:PersonInNeg Pl2 IF (0 Neg + Prt)(*1C ConNeg + Pl2 BARRIER NOT-ADV);
SELECT:PersonInNeg Pl3 IF (0 Neg + Prt)(*1C ConNeg + Pl3 BARRIER NOT-ADV);
REMOVE (Neg Prt)(NEGATE 1 ("lea" ConNeg Prt)) ;
## this is for removing the 'ij' etc. 


# Imperative
#REMOVE:NotImpIfWord Imp IF (*-1 NOT-ADV-INT-PCLE BARRIER CS OR CC);
#REMOVE:NotIndIfImpAndExcl Ind IF (NOT *-1 Neg)(0 Imp)(*1 ("excl") BARRIER Ind);
       ## 

# There can be Interj, VOC, 
SELECT Imprt (-1 BOS OR (":") OR Interj)(0 (V Sg2))(NOT *1 (Pers Sg2 Nom) BARRIER S-BOUNDARY) ;
SELECT Imprt (-1 BOS OR (":") OR Interj)(1 COMMA) ;
REMOVE Imprt (-1 Interr OR Adv OR (Pers Sg2))(0 (Prs Sg2)) ;
REMOVE Imprt (*-1 WORD BARRIER CC OR COMMA OR BOS)(NOT 0 Neg)(NEGATE -1 CC LINK *-1 Imprt BARRIER S-BOUNDARY OR V) ;
SELECT (Imprt Sg2) (-1 CC LINK *-1C (Imprt Sg2) BARRIER S-BOUNDARY OR V) ;


LIST @+FAUXV = @+FAUXV ; 
LIST @+FMAINV = @+FMAINV ; 
LIST @-FAUXV = @-FAUXV ;
LIST @-FMAINV = @-FMAINV ;
SET MAINV = @-FMAINV OR @+FMAINV ;

#
MAP (@+FAUXV) TARGET VFIN (0 Neg OR MOD-ASP) (*1 V BARRIER S-BOUNDARY);
MAP (@+FAUXV) TARGET VFIN (0 COPULAS) ((*1 PrfPrc OR Ger BARRIER S-BOUNDARY OR CC) OR (-1 PrfPrc));
MAP (@+FMAINV) TARGET VFIN (NOT 0 COPULAS) (1 VGen);

MAP (@+FAUXV) TARGET VFIN (0 AUX LINK NOT 0 COPULAS) (*1 V BARRIER S-BOUNDARY OR CC);
MAP (@+FMAINV) TARGET VFIN (0 COPULAS)(NOT *1 PrfPrc OR Ger BARRIER S-BOUNDARY);
MAP (@+FAUXV) TARGET VFIN (0 MOD-ASP OR Neg);
MAP (@-FAUXV) TARGET AUX (0 Inf OR ConNeg)(*1 Inf BARRIER S-BOUNDARY OR CC);

MAP (@+FMAINV) TARGET VFIN IF (NOT 0 AUX) ;
MAP (@+FMAINV) TARGET VFIN IF (0 AUX LINK NOT *1 Inf OR PrfPrc BARRIER S-BOUNDARY) ;

MAP (@-FMAINV) TARGET Ger OR ConNeg OR PrfPrc OR Inf ;
#


# PrfPrc
#SELECT PrfPrc (*-1 ("lea") BARRIER V OR S-BOUNDARY) ;

# Person
# leah Prs Sg2 = Pl3
SELECT:VSg2IfPersSg2 (V Sg2) (*-1 (Pers Nom Sg2) OR (Rel Sg Nom) BARRIER V OR Nom);
SELECT:VSg2IfPersSg2 (V Sg2) (1 (Pers Nom Sg2));
SELECT:Pl3WhenPlSubj (V Pl3) IF (*-1 (N Pl Nom) OR (Num Sg Nom) OR (Pers Nom Pl3) BARRIER Sg2 OR S-BOUNDARY)(0 ("lea" V));
SELECT:Pl3WhenSubjCC (V Pl3) IF (-1 (N Sg Nom) LINK -1 CC)(0 ("lea" V));
REMOVE (V Pl3) (NOT *0 Nom BARRIER S-BOUNDARY) ;
SELECT:Sg3WhenRelSg (V Sg3) (-1 (Rel Sg Nom));
SELECT:Sg3WhenSg3toLeft (V Sg3) (-1 CC LINK *-1C (V Sg3) BARRIER S-BOUNDARY OR V);


SELECT:InfIfInfv (V Inf) IF (*-1 INFV OR AUX BARRIER S-BOUNDARY)(0 Ind) ; ; 
# Should be BARRIER V OR CS OR CC # It doesn´t work...
	# Manne båatam sagke buerebe datneste jieledh, Karijuse.

SELECT:PrfPrcIfLea PrfPrc (*-1 ("lea") BARRIER V);


SELECT:PlIfPlSubj Pl3 IF (*-1 (Pl Nom) BARRIER NOT-ADV);

REMOVE Foc/gan (0 (V Du3)) ;
SELECT Ger (0 (Der/NomAct) LINK *-1 REALCOPULAS BARRIER S-BOUNDARY)

# Contract or not

REMOVE:NotContrIfEven (".*ijidh"r) IF (0 (".*[oe]dh"r));		
# This rule might be problematic in light of the empirical work.		     

# Span sentences

"<lea>" REMOVE Pl3 IF (<*-1 Sg1 OR Sg2)(NOT *-1 (N Pl Nom));

# Nomen

#SELECT Attr IF (0 Prop)(1 Prop); # Too hard.
REMOVE (Prop Attr) IF (NOT 1 Prop);

SELECT:GenToAdp Gen IF (1 Adp);
REMOVE:NotNomToAdp Nom IF (1 Adp);

SELECT:GenIfLeaNom Gen (1 ("lea" V) LINK 0 Pl3 OR Sg3)(*1 (N Nom) BARRIER NPNH) ; 
	# Dan lin baenieh njaelmesne.


SELECT:AccIfSVOV (Acc Sg) IF (*-1C INFV BARRIER NPNH)(1C V); # consider VFIN for INFV


# Verb or Noun

REMOVE:NotNomIfInf (N Pl Nom) IF (0 Inf)(*-1 Ind or Imp LINK *-1 Nom);
       ## jieledh.

# Dem

# Trivialia

REMOVE ("Daa") IF (0 ("daate"));
REMOVE ("Daae") IF (0 ("daate"));
	## Daah
	# Problem: Person names Daa, Daae coded as placenames
	
# agreement:
# Dem Sg Nom + N Sg Nom			Dem Pl Nom + N Pl Nom
# Dem Sg Acc + N Sg Acc			Dem Pl Acc + N Pl Acc
# Dem Sg Gen + N Sg Gen			Dem Pl Gen + N Pl Gen
# Dem Sg Ill Attr + N Sg Ill	Dem Pl Ill + N Pl Ill
# Dem Sg Ine + N Sg Ine			Dem	Pl Ine + N Pl Ine
# Dem Sg Ela + N Sg Ela			Dem Pl Ela + N Pl Ela
# Dem Sg Com + N Sg Com			Dem	Pl Com Attr + N Pl Com

SELECT:DemIll (Dem Ill Attr)(*1 (N Sg Ill) BARRIER NPNH) ;
SELECT:DemCom (Dem Com Attr)(*1 (N Pl Com) BARRIER NPNH) ;

SELECT:unifDem $$CASES (0C Dem LINK *1 $$CASES BARRIER NPNH LINK 0 NOMEN-NOT-PRON) ;
	## Klaasen tjirrh olkese goevli doj veelkes baeniej gåajkoe, ...
REMOVE:NotPersWhenDem Pers IF (0 Dem + $$NUMBER + $$CASES LINK *1 N + $$NUMBER + $$CASES BARRIER NPNH);
REMOVE:NotPersWhenDemSg Pers IF (0 Dem + Sg3 + $$CASES LINK *1 N + Sg + $$CASES BARRIER NPNH);
REMOVE:NotPersWhenDemPl Pers IF (0 Dem + Pl3 + $$CASES LINK *1 N + Pl + $$CASES BARRIER NPNH);

REMOVE:NotDem Dem IF (0 Pers)(*1 NOMEN-NOT-PRON BARRIER NPNH)(NEGATE 0 $$CASES LINK *1 NOMEN-NOT-PRON LINK 0 $$CASES);
	## Dihte fievsesne jih mov govse. 

REMOVE:NotDem2 Dem IF (0 Pers)(NEGATE *1 NOMEN-NOT-PRON BARRIER NPNH);
	## Dihte joekoen lustes jalhts ajve akten jaepien båeries.


#REMOVE:PronIfNotAgree (Dem Nom) IF (0 Pers)(NEGATE *1 Nom BARRIER NPNH);

SELECT (N Gen)(-1C (Dem Gen)) ;
SELECT (Pron Pers Gen) (0 Pron LINK 1C Po) ;
#SELECT (Pron Dem Gen) (0 Pron LINK 1C (Ord Gen) OR (Num Gen)) ;
#SELECT (Pron Dem Pl) (1 (Indef Pl)) ;

#REMOVE Pron IF (-1 S-BOUNDARY)(0 (Dem Gen))(1 N OR Num OR A);
	
	
# CC and CS or Adv
IFF:GoNotCs Pcle (-1 Neg)(0 ("goh")); 
	## Ih goh måjhtijh ahte månnoeh daesnie sagke seadtoesåbpoe årroen. # Pcle
	## Dallah goh Jeesuse tjaetseste tjuedtjele, dellie vuajna Elmie rihpesåvva jih Voejkene altasasse goh ledtie suaja. # CS


REMOVE:NotNomIfCs (N Nom) (0 CS)(1 (N Nom)) ;
	# Guktie vielle Baktuse, giehtelh maa!

	
REMOVE:CsIfNotFuncword Pcle (NEGATE *-1 NOT-ADV-INT-PCLE)(0 CS) ;
	# Jaa, jis damth seekere.....	

REMOVE:NotCsIfCc CS (-1 CC OR ("mij" Nom))(0 Adv) ;
	# Jih dellie jeehti...

REMOVE:NotCsIfBOS CS (NEGATE -1 WORD)(0 Adv) ;

# Adj or Adv
REMOVE A (0 Adv)(1C V) ;
REMOVE A (0 Adv)(-1C V LINK NOT 0 COPULAS)(NEGATE 1 A OR N) ;

SELECT (A Attr) (*1C N BARRIER NPNH) ;
REMOVE (A Attr) (NOT 1 N OR A) ;


# grammatisk ord eller N
REMOVE N (0 ("daelie" Nom) LINK 1 Nom) ;
	## Daelie Tåamma riejries dåakteren luvnie. 

SELECT CC OR CS (*-1 VFIN BARRIER S-BOUNDARY)(*1 VFIN BARRIER S-BOUNDARY);
	## Tåamma gylje juktie bååktjehke dorje.

# Adj or Indef
SELECT (A Pl) (0 (Indef))(*1 (N Pl) BARRIER S-BOUNDARY) ;
REMOVE A (NEGATE 0 Nom)(1 MAINV) ;
	## Mov aehtjie jijnjem maahta. 

# Num

SELECT Num IF (-1 CC)(*-2C Num BARRIER V);
SELECT (Num Ine) (0 ("akte") LINK *1 (N Ine) BARRIER NPNH);
SELECT (Ord Nom)(0 Num LINK 1 N);
	## Manne skuvlesne vijhtede klaassesne.

# Putative contract verb


# Rel or Interr
SELECT Interr (0 Rel LINK NEGATE *-1 Interr)(*1 ("?")) ; 
REMOVE Interr (0 Rel LINK -1 WORD LINK NOT 0 Interj OR CC OR CS) ;
REMOVE Interr (NEGATE *1 ("?")) ;

SELECT (Rel Gen) (*-1 VFIN BARRIER S-BOUNDARY)(*1 N BARRIER NPNH);
    ## Jaepien 1877 die pruvri aktine man nomme Jonas Mortensen.

# Interj


# Po or Pr
SELECT Po (0 Pr)(-1 Gen) ;
REMOVE Pr (NEGATE *1 N BARRIER V OR S-BOUNDARY) ;
REMOVE Po (NEGATE *-1 Gen BARRIER V OR S-BOUNDARY) ;



# Adv or Po/Pr
SELECT Adv (0 Po)(NEGATE -1 Gen) ;
    ## Desnie lim dam mietskem jaepien 1941, vaaksjoeminie ektine mov gåmmine, Henny Bergsland, mij vuelieh tjeeli mejtie Jonetta joejki.


# Illative or genetive
SELECT Ill (0 Gen)(*1 ILLV BARRIER NOT-ADV);
REMOVE Gen (0 Ill)(NOT *-1 Pr BARRIER NPNH)(1 EOS OR S-BOUNDARY);
	## Tåamma fuehpesne gåatan.

SELECT Ill (*0 ILLV BARRIER S-BOUNDARY OR ILLADV) ;


# Com
SELECT (N Com)(*-1 ("ektine") BARRIER NPNH) ;
    ## Desnie lim dam mietskem jaepien 1941, vaaksjoeminie ektine mov gåmmine, Henny Bergsland, mij vuelieh tjeeli mejtie Jonetta joejki.

SELECT Com (*0 COMV BARRIER S-BOUNDARY) ;


# special lemmas
SELECT N (0 ("nomme") LINK 1 Prop) ;
    ## Sara jaepien 1889 Röörosen dajvese bööti jih jaepien 1893 die pruvri aktine man nomme Anders Paulsen
SELECT ("giesie" Gen)(1 Num);
    
    
            AFTER-SECTIONS              #
# ======================================== #
   
#SUBSTITUTE (A) (A <sma>) WORD ;
#SUBSTITUTE (N) (N <sma>) WORD ;
#SUBSTITUTE (Adv) (Adv <sma>) WORD ;
#SUBSTITUTE (V) (V <sma>) WORD ;
#SUBSTITUTE (Num) (Num <sma>) WORD ;
#SUBSTITUTE (Interj) (Interj <sma>) WORD ;
#SUBSTITUTE (Po) (Po <sma>) WORD ;
#SUBSTITUTE (Pr) (Pr <sma>) WORD ;
#SUBSTITUTE (Pron) (Pron <sma>) WORD ;
#SUBSTITUTE (CC) (CC <sma>) WORD ;
#SUBSTITUTE (CS) (CS <sma>) WORD ;
#SUBSTITUTE (Pcle) (Pcle <sma>) WORD ;


