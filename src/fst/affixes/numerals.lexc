! Divvun & Giellatekno - open source grammars for Sámi and other languages
! Copyright © 2000-2010 The University of Tromsø & the Norwegian Sámi Parliament
! http://giellatekno.uit.no & http://divvun.no
!
! This program is free software; you can redistribute and/or modify
! this file under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version. The GNU General Public License
! is found at http://www.gnu.org/licenses/gpl.html. It is
! also available in the file $GTHOME/LICENSE.txt.
!
! Other licensing options are available upon request, please contact
! giellatekno@uit.no or feedback@divvun.no

! ############################## !
!This file contains the numerals !
! ############################## !





! Case forms of the basic digits
! ------------------------------

LEXICON NUMTAGe_NOTakte ! akte:akt
+Num+Sg+Acc+Use/NG:e FINAL1 ; ! göökte = Acc ???
NUMTAGe ;

LEXICON NUMTAGe ! akte:akt
+Num+Sg+Nom:e FINAL1 ;
+Num+Sg+Gen:%>en FINAL1 ;
+Num+Sg+Acc:%>em FINAL1 ;
+Num+Sg+Ill+Attr:%>en FINAL1 ;
+Num+Sg+Ill:%>ese FINAL1 ;
+Num+Sg+Ine:%>esne FINAL1 ;
+Num+Sg+Ine+Attr:%>ene # ; !XXX Attr forms
+Num+Sg+Ela+Attr:%>ede # ; !XXX Attr forms
+Num+Sg+Ela:%>este FINAL1 ;
+Num+Sg+Com:%>ine FINAL1 ;
+Num+Ess:%>ine FINAL1 ;
+Num+Pl+Nom:%>h FINAL1 ;
+Num+Pl+Acc:%>ide FINAL1 ;
+Num+Pl+Gen:%>i FINAL1 ;
+Num+Pl+Com+Attr:%>i FINAL1 ;
+Num+Pl+Ill:%>ide FINAL1 ;
+Num+Pl+Ine:%>ine FINAL1 ;
+Num+Pl+Ela:%>ijste FINAL1 ;
+Num+Pl+Com:%>igujmie FINAL1 ;


LEXICON NUMTAGie !njieljie:njielj
+Num+Sg+Nom:ie FINAL1 ;
+Num+Sg+Acc:ie%>m FINAL1 ;
+Num+Sg+Gen:ie%>n FINAL1 ;
+Num+Sg+Ill+Attr:ie%>n FINAL1 ;
+Num+Sg+Ill+Uml:%>%^1UMLan FINAL1 ;
+Num+Sg+Ine:%>esne FINAL1 ;
+Num+Sg+Ine+Attr:%>ene # ;
+Num+Sg+Ela+Attr:%>ede # ;
+Num+Sg+Ela:%>este FINAL1 ;
+Num+Sg+Com:%>ine FINAL1 ;
+Num+Ess:%>ine FINAL1 ;
+Num+Pl+Nom:ie%>h FINAL1 ;
+Num+Pl+Acc:%>ide FINAL1 ;
+Num+Pl+Gen:ie%>j FINAL1 ;
+Num+Pl+Com+Attr:ie%>j FINAL1 ;
+Num+Pl+Ill:%>ide FINAL1 ;
+Num+Pl+Ine:%>ine FINAL1 ;
+Num+Pl+Ela:%>ijste FINAL1 ; !
+Num+Pl+Com:ie%>jgujmie FINAL1 ;



! Ordinal numbers
! ---------------

LEXICON MUBPIE
+Sg+Nom:ie FINAL1 ;
+Sg+Acc:ie%>m FINAL1 ;
+Sg+Gen:ie%>n FINAL1 ;
!+Sg+Ill+Attr:ie%>n FINAL1 ; This one is wrong. selvfølgelig 'måbpan'
! +Sg+Ill:%>an FINAL1 ; !SUB - is this possible? IllSg without Uml in -ie? Maja: No! Its not possible.
+Sg+Ill+Uml:%>%^1UMLan FINAL1 ;
+Sg+Ine:e%>sne FINAL1 ;
+Sg+Ine+Attr:e%>ne # ;
+Sg+Ela+Attr:e%>de # ;
+Sg+Ela+Attr+Err/Orth:e%>hte # ;
+Sg+Ela:e%>ste FINAL1 ;
+Sg+Com:%>ine FINAL1 ;
+Sg+Com+Uml:%>%^iUMLine FINAL1 ;

+Pl+Nom:ie%>h FINAL1 ;
+Pl+Acc:%>ide FINAL1 ;
+Pl+Acc+Uml:%>%^iUMLide FINAL1 ;
+Pl+Gen:ie%>j FINAL1 ;
+Pl+Gen+Uml+Use/NG:%>%^iUMLi FINAL1 ;
+Pl+Ill:%>ide FINAL1 ;
+Pl+Ill+Uml+Use/NG:%>%^iUMLide FINAL1 ;
+Pl+Ine:%>ine FINAL1 ;
+Pl+Ine+Uml+Use/NG:%>%^iUMLine FINAL1 ;
+Pl+Ela:%>ijste FINAL1 ;
+Pl+Ela+Uml+Use/NG:%>%^iUMLijste FINAL1 ;
+Pl+Com:ie%>jgujmie FINAL1 ;
+Pl+Com+Attr:ie%>j FINAL1 ;
+Pl+Com+Uml+Use/NG:%>%^iUMLigujmie FINAL1 ;
+Ess:%>ine FINAL1 ;
+Ess+Uml+Use/NG:%>%^iUMLine FINAL1 ;

LEXICON ORDTAGODD-ord
+Attr:e%^DISIMP FINAL1 ;
+Cmp/Attr:e%^DISIMP R ; !Attr?
 ORDTAGODD ;

LEXICON ORDTAGODD
+Sg+Nom:e%^DISIMP FINAL1 ;
+Sg+Acc:e%>%^DISIMPm FINAL1 ;
+Sg+Gen:e%>%^DISIMPn FINAL1 ;
+Sg+Ill+Attr:e%>%^DISIMPn FINAL1 ;
+Sg+Ill:%>asse FINAL1 ; !Rule to delete Jesuse%>asse > Jesusasse
+Sg+Ine+Attr:%>inie # ;
+Sg+Ela+Attr:%>ihtie # ;
+Sg+Ine:%>isnie FINAL1 ;
+Sg+Ela:%>istie FINAL1 ;
+Sg+Com:%>inie FINAL1 ;
+Pl+Nom:%>%^DISIMPh FINAL1 ;
+Pl+Acc:%>idie FINAL1 ;
+Pl+Gen:%>%^DISIMPi FINAL1 ;
+Pl+Ill:%>idie FINAL1 ;
+Pl+Ine:%>inie FINAL1 ;
+Pl+Ela:%>ijstie FINAL1 ;
+Pl+Com:%>%^DISIMPigujmie FINAL1 ;
+Pl+Com+Err/Orth:%>%^DISIMPigyjmie FINAL1 ; !
+Ess:%>inie FINAL1 ;
+Cmp/SgNom:e%^DISIMP R ; !Som i sme

LEXICON ORDTAGEVEN-ord
+Attr:e FINAL1 ;
 ORDTAGEVEN ;


LEXICON ORDTAGEVEN
+Sg+Nom:e FINAL1 ;
+Sg+Acc:%>em FINAL1 ;
+Sg+Gen:%>en FINAL1 ;
+Sg+Ill:%>ese FINAL1 ;
+Sg+Ine:%>esne FINAL1 ;
+Sg+Ine+Attr:%>ene # ;
+Sg+Ela+Attr:%>ede # ;
+Sg+Ela:%>este FINAL1 ;
+Sg+Com:%>ine FINAL1 ;
+Ess:%>ine FINAL1 ;
+Pl+Nom:%>h FINAL1 ;
+Pl+Acc:%>ide FINAL1 ;
+Pl+Gen:%>i FINAL1 ;
+Pl+Ill:%>ide FINAL1 ;
+Pl+Ine:%>ine FINAL1 ;
+Pl+Ela:%>ijste FINAL1 ;
+Pl+Com:%>ijgujmie FINAL1 ;
+Pl+Com+Err/Orth:%>igyjmie FINAL1 ;



!  Collection numbers
! ---------------



LEXICON COLLTAG
          +N+Coll+Pl+Nom:%>%^DISIMPh       FINAL1 ;
          +N+Coll+Pl+Acc:%>idie            FINAL1 ;
          +N+Coll+Pl+Gen:%>%^DISIMPi       FINAL1 ;
          +N+Coll+Pl+Ill:%>idie            FINAL1 ;
          +N+Coll+Pl+Ine:%>inie            FINAL1 ;
          +N+Coll+Pl+Ela:%>ijstie          FINAL1 ;
          +N+Coll+Pl+Com:%>%^DISIMPigujmie FINAL1 ;
 +N+Coll+Pl+Com+Err/Orth:%>%^DISIMPigyjmie FINAL1 ;
             +N+Coll+Ess:%>inie            FINAL1 ;

LEXICON dateyearcase_nullsuff_w_dot
          +Sg+Nom: MARKDOT ;
          +Sg+Gen: MARKDOT ;
          +Sg+Acc: MARKDOT ;
     +Sg+Ill+Attr: MARKDOT ;
     +Sg+Ela+Attr: MARKDOT ;


LEXICON dateyearcase_fullsuff
          +Sg+Acc:%:m  #      ;
          +Sg+Gen:%:n  #      ;
 +Err/Orth+Sg+Acc:m  #      ;
 +Err/Orth+Sg+Gen:n  #      ;
          +Sg+Ine:%:sne  #      ;
 +Err/Orth+Sg+Ine:sne   #      ;
          +Sg+Ela:%:ste  #      ;
 +Err/Orth+Sg+Ela:ste   #      ;
          +Sg+Ill:%:se  #      ;
 +Err/Orth+Sg+Ill:se    #      ;
      +Cmp/SplitR:%-   ENDLEX ;
      +Cmp/SplitR:%–   ENDLEX ;




LEXICON ARABICCASES   !!≈ * **@CODE@**  adds +Arab
 +Arab:  DIGITCASES ;

LEXICON ARABICCASE   !!≈ * **@CODE@**  adds +Arab
 +Arab:  DIGITCASE ;

LEXICON ARABICCASE0   !!≈ * **@CODE@**  adds +Arab
 +Arab:  DIGITCASE0 ;


LEXICON DIGITCASES   !!≈ * **@CODE@**  to distinguish between 0 and oblique
DIGITCASE0 ;
DIGITCASE ;

LEXICON DIGITCASE0
      +Sg+Nom: # ;
 +Sg+Ill+Attr: # ;
 +Sg+Ine+Attr: # ;
 +Sg+Ela+Attr: # ;
 +Sg+Acc+Attr: # ;
 +Sg+Gen+Attr: # ;
!+Sg+Acc: # ; Outcommented this one, because numerals Nom got Acc- analyse without case ending, and thats wrong.(Maja)

LEXICON DIGITCASE
!   f+Sg+Nom+Err/Orth:f       # ; ! s. 123f.
!  ff+Sg+Nom+Err/Orth:ff      # ; ! s. 123ff.
!   b+Sg+Nom+Err/Orth:b       # ; ! § 123b
!   c+Sg+Nom+Err/Orth:c       # ; ! § 123c
!   d+Sg+Nom+Err/Orth:d       # ; ! § 123d
!   e+Sg+Nom+Err/Orth:e       # ; ! § 123e
!            +Sg+Gen:        # ;
        +Sg+Gen:n       # ;
        +Sg+Acc:m       # ;
        +Sg+Ill:se      # ;
        +Sg+Ine:sne     # ; ! NRK:sne
        +Sg+Ela:ste     # ; ! NRK:ste
        +Sg+Com:ine     # ;
           +Ess:ine     # ; ! NBR:ine
        +Pl+Nom:h       # ;
        +Pl+Gen:j       # ;
        +Pl+Acc:ide     # ;
        +Pl+Ill:ide     # ;
        +Pl+Ine:ine     # ;
        +Pl+Ela:jste    # ;
        +Pl+Com:jgujmie # ;
!ordinals

LEXICON ARABICCASEORD
      +Sg+Nom:%>de       # ;
      +Sg+Gen:%>den      # ;
      +Sg+Acc:%>dem      # ;
      +Sg+Ill:%>dasse    # ;
 +Sg+Ine+Attr:%>dinie    # ;
 +Sg+Ela+Attr:%>dihtie   # ;
      +Sg+Ine:%>disnie   # ;
      +Sg+Ela:%>distie   # ;
      +Sg+Com:%>dinie    # ;
      +Sg+Ess:%>dinie    # ;
      +Pl+Nom:%>dh       # ;
      +Pl+Gen:%>di       # ;
      +Pl+Acc:%>didie    # ;
      +Pl+Ill:%>didie    # ;
      +Pl+Ine:%>dinie    # ;
      +Pl+Ela:%>dijstie  # ;
      +Pl+Com:%>digujmie # ;

LEXICON ARABICCASEORD-ERR
      +Sg+Nom:%>e       # ;
      +Sg+Gen:%>en      # ;
      +Sg+Acc:%>em      # ;
      +Sg+Ill:%>asse    # ;
 +Sg+Ine+Attr:%>inie    # ;
 +Sg+Ela+Attr:%>ihtie   # ;
      +Sg+Ine:%>isnie   # ;
      +Sg+Ela:%>istie   # ;
      +Sg+Com:%>inie    # ;
      +Sg+Ess:%>inie    # ;
      +Pl+Nom:%>h       # ;
      +Pl+Gen:%>i       # ;
      +Pl+Acc:%>idie    # ;
      +Pl+Ill:%>idie    # ;
      +Pl+Ine:%>inie    # ;
      +Pl+Ela:%>ijstie  # ;
      +Pl+Com:%>igujmie # ;

LEXICON ARABICCASECOLL
 +Pl+Nom:%>sh       # ;
 +Pl+Acc:%>sidie    # ;
 +Pl+Gen:%>si       # ;
 +Pl+Ill:%>sidie    # ;
 +Pl+Ine:%>sinie    # ;
 +Pl+Ela:%>sijstie  # ;
 +Pl+Com:%>sigujmie # ;
    +Ess:%>sinie    # ;

!LEXICON ORD_DOTwBACKTRACK  The __@CODE@__ is used to handle the tokenisation
! ! of ordinals. Strings like `10.` are inherently ambiguous — they can eitiher
! ! be a regular cardinal followed by an end-of-sentence full stop, or they can
! ! be an ordinal, potentially in the middle of a sentence. Regular fst's know
! ! nothing about this double nature, so we just give the default ordinal
! ! analysis. But for pmatch-based lookup and tokenisation, we try to find all
! ! the alternatives. The lexicon contains just the following two lines:
! ! ```
!    +Use/-PMatch:%.                              # ; !!= @CODE@
! < "+Use/PMatch":0 "@P.Pmatch.Backtrack@" 0:%. > # ; !!= @CODE@
! ! ```
! ! The idea is that input like `10.` can then be analysed both as the ordinal
! ! `10.`, and as the sequence cardinal `10` + the sentence ending full stop
! ! `.`. The lexc entry above will only give the ordinal analysis of `10.`,
! ! but then tell the fst runtime to go back and try to find alternatives for the
! ! same input, in which case it will find that `10` + `.` matches the same
! ! input. Both tokenisations will then be printed by `hfst-tokenise --giella`,
! ! so that further processing can be done to choose the correct one in a given
! ! context. The location of the symbol `@P.Pmatch.Backtrack@` determines where
! ! the split is being done, and thus which parts could potentially get other
! ! analyses.




LEXICON yeartagpl
          +Num+Sem/Year+Pl+Nom:        # ;
          +Num+Sem/Year+Pl+Gen:        # ;
          +Num+Sem/Year+Pl+Acc:        # ;
 +Num+Sem/Year+Err/Orth+Pl+Ine:%:dinie # ;

LEXICON dateyearcase
      +Sg+Nom:        #      ;
      +Sg+Gen:        #      ;
      +Sg+Gen+Err/Orth:n       #      ;
      +Sg+Acc+Err/Orth:m       #      ;
      +Sg+Ine+Err/Orth:sne       #      ;
      +Sg+Ela+Err/Orth:ste       #      ;
      +Sg+Ill+Err/Orth:se       #      ;
      +Sg+Gen+Use/NG:%:n       #      ;
      +Sg+Acc:%:m       #      ;
      +Sg+Ine:%:sne       #      ;
      +Sg+Ela:%:ste       #      ;
      +Sg+Ill:%:se       #      ;
!      +Sg+Ill:se      #      ;
!      +Sg+Com:ine     #      ;
!         +Ess:ine     #      ; ! NBR:ine
!      +Pl+Nom:h       #      ;
!      +Pl+Gen:j       #      ;
!      +Pl+Acc:ide     #      ;
!      +Pl+Ill:ide     #      ;
!      +Pl+Ine:ine     #      ;
!      +Pl+Ela:jste    #      ;
!      +Pl+Com:jgujmie #      ;
! +Sg+Ill+Attr:        #      ;
! +Sg+Ine+Attr:        #      ;
  +Cmp/SplitR:%-      ENDLEX ;
  +Cmp/SplitR:%–      ENDLEX ;


LEXICON ROMNUMTAGOBL !
      +Rom+Sg+Gen:n   # ; ! But here 123a 123
      +Rom+Sg+Acc:    # ;
      +Rom+Sg+Ill:se  # ;
      +Rom+Sg+Ine:sne # ;
 +Rom+Sg+Ine+Attr:ne  # ;
 +Rom+Sg+Ela+Attr:de  # ;
      +Rom+Sg+Ela:ste # ;
      +Rom+Sg+Com:ine # ;
      +Rom+Sg+Ess:ine # ;
